
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 03 18:17:02 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.io.File;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.lang.StringBuffer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 03 18:17:02 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\015\002\000\002\002\004\000\002\002" +
    "\004\000\002\006\004\000\002\006\005\000\002\006\002" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\002\000\002\016\002\000\002\005\010\000\002" +
    "\017\002\000\002\005\007\000\002\020\002\000\002\021" +
    "\002\000\002\005\015\000\002\022\002\000\002\005\011" +
    "\000\002\023\002\000\002\024\002\000\002\005\012\000" +
    "\002\025\002\000\002\005\011\000\002\026\002\000\002" +
    "\005\010\000\002\003\003\000\002\003\003\000\002\027" +
    "\002\000\002\003\006\000\002\030\002\000\002\003\006" +
    "\000\002\031\002\000\002\003\006\000\002\032\002\000" +
    "\002\003\006\000\002\033\002\000\002\003\005\000\002" +
    "\034\002\000\002\003\006\000\002\003\002\000\002\035" +
    "\002\000\002\014\006\000\002\036\002\000\002\014\006" +
    "\000\002\037\002\000\002\014\006\000\002\040\002\000" +
    "\002\014\006\000\002\041\002\000\002\014\006\000\002" +
    "\042\002\000\002\014\006\000\002\043\002\000\002\014" +
    "\006\000\002\044\002\000\002\014\006\000\002\045\002" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\012\002\001\025\001\027\001\031\001\001" +
    "\002\000\012\002\ufffc\025\011\027\013\031\010\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\016\002\ufffc\025\011\026\ufffc\027\013\031\010\032\ufffc" +
    "\001\002\000\022\006\130\025\011\027\013\031\010\032" +
    "\ufffc\037\124\040\125\041\127\001\002\000\050\004\uffee" +
    "\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\026\uffee\031\uffee\036\uffee\037\uffee\001\002\000" +
    "\004\002\000\001\002\000\004\036\014\001\002\000\004" +
    "\030\015\001\002\000\004\025\016\001\002\000\050\004" +
    "\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\026\ufff3\031\ufff3\036\ufff3\037\ufff3\001\002" +
    "\000\004\025\020\001\002\000\012\025\011\026\ufffc\027" +
    "\013\031\010\001\002\000\004\026\022\001\002\000\016" +
    "\002\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\001" +
    "\002\000\050\004\024\005\031\007\uffd9\010\027\011\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffc4\023\uffc4\024\033\026\uffc4\031\034\036\025" +
    "\037\026\001\002\000\010\022\uffc6\023\uffc6\026\uffc6\001" +
    "\002\000\036\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\032\uffe7\001\002\000\036\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\032\uffe6\001\002" +
    "\000\044\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\026\uffdd\031\uffdd\032\uffdd\036\uffdd\037\uffdd\001\002\000" +
    "\026\007\037\010\040\011\042\012\041\014\075\015\074" +
    "\016\073\017\072\020\071\021\076\001\002\000\010\022" +
    "\uffc5\023\uffc5\026\uffc5\001\002\000\010\022\056\023\057" +
    "\026\064\001\002\000\050\004\uffc8\005\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\031" +
    "\uffc8\036\uffc8\037\uffc8\001\002\000\022\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\031\uffdb\032\uffdb\036\uffdb\037\uffdb\001" +
    "\002\000\022\007\uffd9\010\027\011\uffd9\012\uffd9\031\034" +
    "\032\uffd9\036\025\037\026\001\002\000\014\007\037\010" +
    "\040\011\042\012\041\032\043\001\002\000\044\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\026\uffe5\031\uffe5" +
    "\032\uffe5\036\uffe5\037\uffe5\001\002\000\044\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3\031\uffe3\032" +
    "\uffe3\036\uffe3\037\uffe3\001\002\000\044\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf\031\uffdf\032\uffdf" +
    "\036\uffdf\037\uffdf\001\002\000\044\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\026\uffe1\031\uffe1\032\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\036\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\026\uffda\032\uffda\001\002\000\044" +
    "\007\uffd9\010\027\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\031\034\032\uffd9\036\025\037\026\001\002\000\036\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\026\uffe0\032" +
    "\uffe0\001\002\000\044\007\uffd9\010\027\011\uffd9\012\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\026\uffd9\031\034\032\uffd9\036\025\037\026" +
    "\001\002\000\036\007\uffde\010\uffde\011\uffde\012\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\026\uffde\032\uffde\001\002\000\044\007\uffd9\010" +
    "\027\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\031\034\032" +
    "\uffd9\036\025\037\026\001\002\000\036\007\uffe2\010\uffe2" +
    "\011\042\012\041\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2\032\uffe2\001\002" +
    "\000\044\007\uffd9\010\027\011\uffd9\012\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\031\034\032\uffd9\036\025\037\026\001\002\000" +
    "\036\007\uffe4\010\uffe4\011\042\012\041\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026" +
    "\uffe4\032\uffe4\001\002\000\050\004\024\005\031\007\uffd9" +
    "\010\027\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffc4\023\uffc4\024\033\026\uffc4" +
    "\031\034\036\025\037\026\001\002\000\010\022\uffc7\023" +
    "\uffc7\026\uffc7\001\002\000\050\004\uffcc\005\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\031\uffcc\036\uffcc\037\uffcc\001\002\000\050\004\uffca\005" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\026\uffca\031\uffca\036\uffca\037\uffca\001\002\000\050" +
    "\004\024\005\031\007\uffd9\010\027\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffc4" +
    "\023\uffc4\024\033\026\uffc4\031\034\036\025\037\026\001" +
    "\002\000\010\022\056\023\uffc9\026\uffc9\001\002\000\050" +
    "\004\024\005\031\007\uffd9\010\027\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffc4" +
    "\023\uffc4\024\033\026\uffc4\031\034\036\025\037\026\001" +
    "\002\000\010\022\uffcb\023\uffcb\026\uffcb\001\002\000\004" +
    "\025\ufff2\001\002\000\004\025\066\001\002\000\012\025" +
    "\011\026\ufffc\027\013\031\010\001\002\000\004\026\070" +
    "\001\002\000\016\002\ufff1\025\ufff1\026\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\001\002\000\026\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\022\uffd4\023\uffd4\026\uffd4\031\uffd4\036\uffd4\037" +
    "\uffd4\001\002\000\026\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\022\uffd6\023\uffd6\026\uffd6\031\uffd6\036\uffd6\037\uffd6\001" +
    "\002\000\026\007\uffd8\010\uffd8\011\uffd8\012\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\031\uffd8\036\uffd8\037\uffd8\001\002\000" +
    "\026\007\uffce\010\uffce\011\uffce\012\uffce\022\uffce\023\uffce" +
    "\026\uffce\031\uffce\036\uffce\037\uffce\001\002\000\026\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\022\uffd0\023\uffd0\026\uffd0" +
    "\031\uffd0\036\uffd0\037\uffd0\001\002\000\026\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\022\uffd2\023\uffd2\026\uffd2\031\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\026\007\uffd9\010\027\011" +
    "\uffd9\012\uffd9\022\uffd9\023\uffd9\026\uffd9\031\034\036\025" +
    "\037\026\001\002\000\020\007\037\010\040\011\042\012" +
    "\041\022\uffd1\023\uffd1\026\uffd1\001\002\000\026\007\uffd9" +
    "\010\027\011\uffd9\012\uffd9\022\uffd9\023\uffd9\026\uffd9\031" +
    "\034\036\025\037\026\001\002\000\020\007\037\010\040" +
    "\011\042\012\041\022\uffcf\023\uffcf\026\uffcf\001\002\000" +
    "\026\007\uffd9\010\027\011\uffd9\012\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\031\034\036\025\037\026\001\002\000\020\007" +
    "\037\010\040\011\042\012\041\022\uffcd\023\uffcd\026\uffcd" +
    "\001\002\000\026\007\uffd9\010\027\011\uffd9\012\uffd9\022" +
    "\uffd9\023\uffd9\026\uffd9\031\034\036\025\037\026\001\002" +
    "\000\020\007\037\010\040\011\042\012\041\022\uffd7\023" +
    "\uffd7\026\uffd7\001\002\000\026\007\uffd9\010\027\011\uffd9" +
    "\012\uffd9\022\uffd9\023\uffd9\026\uffd9\031\034\036\025\037" +
    "\026\001\002\000\020\007\037\010\040\011\042\012\041" +
    "\022\uffd5\023\uffd5\026\uffd5\001\002\000\026\007\uffd9\010" +
    "\027\011\uffd9\012\uffd9\022\uffd9\023\uffd9\026\uffd9\031\034" +
    "\036\025\037\026\001\002\000\020\007\037\010\040\011" +
    "\042\012\041\022\uffd3\023\uffd3\026\uffd3\001\002\000\044" +
    "\007\uffd9\010\027\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\031\034\032\uffd9\036\025\037\026\001\002\000\036\007" +
    "\uffdc\010\uffdc\011\042\012\041\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\026\uffdc\032" +
    "\uffdc\001\002\000\050\004\024\005\031\007\uffd9\010\027" +
    "\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffc4\023\uffc4\024\033\026\uffc4\031\034" +
    "\036\025\037\026\001\002\000\010\022\056\023\057\026" +
    "\117\001\002\000\004\025\uffed\001\002\000\004\025\121" +
    "\001\002\000\012\025\011\026\ufffc\027\013\031\010\001" +
    "\002\000\004\026\123\001\002\000\016\002\uffec\025\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\001\002\000\004\013" +
    "\151\001\002\000\012\032\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\001\002\000\004\032\145\001\002\000\004\040\136\001" +
    "\002\000\004\037\131\001\002\000\004\013\132\001\002" +
    "\000\004\036\133\001\002\000\004\032\uffeb\001\002\000" +
    "\004\032\135\001\002\000\016\002\uffea\025\uffea\026\uffea" +
    "\027\uffea\031\uffea\032\uffea\001\002\000\012\032\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\001\002\000\012\032\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\001\002\000\012\032\144\035\141\036" +
    "\142\037\143\001\002\000\012\032\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\001\002\000\012\032\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\012\032\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\001\002\000\016\002\ufff6\025\ufff6\026\ufff6\027\ufff6\031" +
    "\ufff6\032\ufff6\001\002\000\010\002\ufffd\026\ufffd\032\ufffd" +
    "\001\002\000\012\032\ufff8\035\ufff8\036\ufff8\037\ufff8\001" +
    "\002\000\012\032\150\035\141\036\142\037\143\001\002" +
    "\000\016\002\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\032" +
    "\ufff4\001\002\000\004\036\152\001\002\000\004\032\uffe9" +
    "\001\002\000\004\032\154\001\002\000\016\002\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\001\002\000\010" +
    "\002\ufffe\026\ufffe\032\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\002\004\015\003\001\001\000\006\005" +
    "\006\006\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\006\006\154\001\001\000\006\005\006\006" +
    "\125\001\001\000\004\023\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\016\001" +
    "\001\000\004\020\022\001\001\000\002\001\001\000\006" +
    "\005\006\006\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\027\014\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\053\001\001\000\004\034\034\001\001\000" +
    "\004\003\035\001\001\000\002\001\001\000\004\027\051" +
    "\001\001\000\004\030\047\001\001\000\004\032\045\001" +
    "\001\000\004\031\043\001\001\000\002\001\001\000\004" +
    "\003\044\001\001\000\002\001\001\000\004\003\046\001" +
    "\001\000\002\001\001\000\004\003\050\001\001\000\002" +
    "\001\001\000\004\003\052\001\001\000\002\001\001\000" +
    "\006\003\027\014\054\001\001\000\002\001\001\000\004" +
    "\043\061\001\001\000\004\044\057\001\001\000\006\003" +
    "\027\014\060\001\001\000\002\001\001\000\006\003\027" +
    "\014\062\001\001\000\002\001\001\000\004\021\064\001" +
    "\001\000\002\001\001\000\006\005\006\006\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\110\001" +
    "\001\000\004\036\106\001\001\000\004\035\104\001\001" +
    "\000\004\042\102\001\001\000\004\041\100\001\001\000" +
    "\004\040\076\001\001\000\004\003\077\001\001\000\002" +
    "\001\001\000\004\003\101\001\001\000\002\001\001\000" +
    "\004\003\103\001\001\000\002\001\001\000\004\003\105" +
    "\001\001\000\002\001\001\000\004\003\107\001\001\000" +
    "\002\001\001\000\004\003\111\001\001\000\002\001\001" +
    "\000\004\003\113\001\001\000\002\001\001\000\006\003" +
    "\027\014\115\001\001\000\002\001\001\000\004\024\117" +
    "\001\001\000\002\001\001\000\006\005\006\006\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\136\001\001\000\004\007\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


			static int i=0,j=0;		
			Decidir d;
			LinkedList<Object> list;
			Llamada l;
			Process p;
			StringBuffer condicion= new StringBuffer("");
				
		
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= TFALSE 
            {
              Object RESULT =null;
		condicion.append(" false ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= TTRUE 
            {
              Object RESULT =null;
		condicion.append(" true ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= NOT NT$24 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$24 ::= 
            {
              Object RESULT =null;
condicion.append("!");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= cond OR NT$23 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$23 ::= 
            {
              Object RESULT =null;
condicion.append("||");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond ::= cond AND NT$22 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$22 ::= 
            {
              Object RESULT =null;
condicion.append("&&");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= exp NIGUAL NT$21 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$21 ::= 
            {
              Object RESULT =null;
condicion.append("!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= exp IGUAL NT$20 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$20 ::= 
            {
              Object RESULT =null;
condicion.append("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= exp MENIG NT$19 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$19 ::= 
            {
              Object RESULT =null;
condicion.append("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= exp MAYIG NT$18 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$18 ::= 
            {
              Object RESULT =null;
condicion.append(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= exp MENOR NT$17 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$17 ::= 
            {
              Object RESULT =null;
condicion.append("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= exp MAYOR NT$16 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$16 ::= 
            {
              Object RESULT =null;
condicion.append(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= AP NT$15 exp CP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		condicion.append(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$15 ::= 
            {
              Object RESULT =null;
condicion.append("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= MEN NT$14 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$14 ::= 
            {
              Object RESULT =null;
condicion.append("-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp DIV NT$13 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              Object RESULT =null;
condicion.append("/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp POR NT$12 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =null;
condicion.append("*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp MEN NT$11 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$11 ::= 
            {
              Object RESULT =null;
condicion.append("-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp MAS NT$10 exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$10 ::= 
            {
              Object RESULT =null;
condicion.append("+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= IDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		condicion.append(" "+s.nombre+" ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		condicion.append(" "+n1+" ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= AP IDENT ASIG NUM NT$9 CP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo ident = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo ident = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
d.asigVar(ident.nombre,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent ::= AP DEF IDENT ASIG NUM NT$8 CP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo ident = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$8 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo ident = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
d.defVar(ident.nombre,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent ::= AC NT$6 cond CC NT$7 AC lista_sent CC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		d.end();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
d.dWhile(condicion.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
condicion= new StringBuffer("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= AA NUM CA NT$5 AC lista_sent CC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		d.end();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
d.dFor(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent ::= AA NUM CA AC NT$3 cond CC NT$4 AC lista_sent CC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		d.end();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 d.dWhileCap(condicion.toString(),n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
condicion= new StringBuffer("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= AP VERB NT$2 lista_var CP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo s2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
						String s1="";
						d.simple(s1, s2.nombre, list);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo s2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
list=new LinkedList<Object>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= AP SUST VERB NT$1 lista_var CP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo s1 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo s2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
						d.simple(s1.nombre, s2.nombre, list);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo s1 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo s2 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
list=new LinkedList<Object>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_var ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_var ::= lista_var TEXTO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_var ::= lista_var NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(new Integer(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_var ::= lista_var IDENT 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo ident = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(new String(ident.nombre));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_sent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_sent ::= AP lista_sent CP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= sent lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= NT$0 lista_sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						d.stop();
						
						try{
							JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
							compiler.run(null,null,null,"Llamada.java");
							l=new Llamada();
						}catch(Exception e){
							e.printStackTrace();
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
d= new Decidir();d.start();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

